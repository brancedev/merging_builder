import 'dart:async';
import 'package:analyzer/dart/element/element.dart' show Element;
import 'package:build/src/builder/build_step.dart';
import 'package:source_gen/source_gen.dart';

/// Generic generator the extends GeneratorForAnnotation<A> and is
/// used to pass objects of type [T] to a merging builder.
///
/// [T] is generic and [A] is typically an annotation.
abstract class MergingGenerator<T, A> extends GeneratorForAnnotation<A> {
  const MergingGenerator();

  /// Generates a stream of objects of type [T]. Each value of [T] is
  /// calculated by calling [generateForAnnotatedElementA<T>].
  Stream<T> generateStream<T>(
      LibraryReader library, BuildStep buildStep) async* {
    for (final annotatedElement in library.annotatedWith(typeChecker)) {
      yield generateForAnnotatedElementA<T>(
        annotatedElement.element,
        annotatedElement.annotation,
        buildStep,
      );
    }
  }

  /// Returns an object of type [T] that will be added to the [Stream<T>]
  /// emitted by [generateStream<T>].
  ///
  /// Override this method in classes extending [MergingGenerator].
  T generateForAnnotatedElementA<T>(
    Element element,
    ConstantReader annotation,
    BuildStep buildStep,
  ) {
    return null;
  }

  /// Returns the merged content that will be written to the output file by
  /// the [MergingBuilder].
  ///
  /// Override this method in classes extending [MergingGenerator].
  ///
  /// Note: The [stream] contains object generated by for all annotated elements
  /// found in all files that match the input [Glob] of the [MergingBuilder].
  FutureOr<String> mergedContent<T>(Stream<T> stream) async {
    return null;
  }

  /// Portion of source code included at the top of the generated file.
  /// Should be specified as header when constructing the merging builder.
  static String get header => null;

  /// Portion of source code included at the very bottom of the generated file.
  /// Should be specified as [footer] when constructing the merging builder.
  static String get footer => null;
}
